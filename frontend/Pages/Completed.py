import streamlit as st
import pandas as pd
from datetime import datetime
from frontend.auth import require_login
from backend.logic import fetch_table, restore_from_completed, delete_entry
from utils.helpers import format_day_of_week, format_monthly_position

def show_completed():
    user = require_login()
    user_id = user.id

    st.title("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–≤–∏—á–∫–∏, –∑–∞–≤–¥–∞–Ω–Ω—è —ñ –ª–æ–≥–∏")

    # --- –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–ø–∏—Å–∏ ---
    habits = fetch_table("habits_completed", user_id)
    tasks = fetch_table("tasks_completed", user_id)
    logs = fetch_table("habit_logs", user_id)

    # --- –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó ---
    def extract_month(date_str):
        try:
            return pd.to_datetime(date_str).to_period("M").strftime("%Y-%m")
        except:
            return "–ù–µ–≤—ñ–¥–æ–º–æ"

    for h in habits:
        h["month"] = extract_month(h.get("completed_at"))
    for t in tasks:
        t["month"] = extract_month(t.get("completed_at"))
    for l in logs:
        l["month"] = extract_month(l.get("completed_at"))

    all_months = sorted(set(h["month"] for h in habits) |
                        set(t["month"] for t in tasks) |
                        set(l["month"] for l in logs))
    selected_month = st.selectbox("üìÖ –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", all_months, index=len(all_months)-1 if all_months else 0)

    st.markdown("---")

    # --- –ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–≤–∏—á–∫–∏ ---
    st.subheader("üîÅ –ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–≤–∏—á–∫–∏")
    month_habits = [h for h in habits if h["month"] == selected_month]
    if not month_habits:
        st.info("‚ÑπÔ∏è –ù–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–≤–∏—á–æ–∫ –∑–∞ —Ü–µ–π –º—ñ—Å—è—Ü—å.")
    else:
        for habit in month_habits:
            repeat_str = {
                "daily": "–©–æ–¥–Ω—è",
                "weekly": format_day_of_week(habit.get("day_of_week", 0)),
                "monthly": f"{format_monthly_position(habit.get('monthly_week'))} {format_day_of_week(habit.get('day_of_week', 0))}",
            }.get(habit["frequency"], "‚Äî")

            st.markdown(
                f"""
                <div style="border:1px solid #ccc;padding:10px;border-radius:8px;margin-bottom:10px;">
                <strong>{habit['name']}</strong> ‚Äî {habit['frequency']} ({repeat_str})<br>
                <small>{habit.get('description', '')}</small><br>
                <i>–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {habit.get('completed_at', '')}</i>
                </div>
                """, unsafe_allow_html=True)

            cols = st.columns([1, 1])
            with cols[0]:
                if st.button("üîÅ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏", key=f"restore_habit_{habit['id']}"):
                    restore_from_completed("habit", habit["id"], user_id)
                    st.rerun()
            with cols[1]:
                if st.button("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", key=f"delete_habit_{habit['id']}"):
                    delete_entry("habits_completed", habit["id"], user_id)
                    st.rerun()

    # --- –ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è ---
    st.subheader("üìå –ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")
    month_tasks = [t for t in tasks if t["month"] == selected_month]
    if not month_tasks:
        st.info("‚ÑπÔ∏è –ù–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –∑–∞ —Ü–µ–π –º—ñ—Å—è—Ü—å.")
    else:
        for task in month_tasks:
            st.markdown(
                f"""
                <div style="border:1px solid #ccc;padding:10px;border-radius:8px;margin-bottom:10px;">
                <strong>{task['name']}</strong> ‚Äî {task['date']} –æ {task['time']}<br>
                <small>{task.get('description', '')}</small><br>
                <i>–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {task.get('completed_at', '')}</i>
                </div>
                """, unsafe_allow_html=True)

            cols = st.columns([1, 1])
            with cols[0]:
                if st.button("üîÅ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏", key=f"restore_task_{task['id']}"):
                    restore_from_completed("task", task["id"], user_id)
                    st.rerun()
            with cols[1]:
                if st.button("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", key=f"delete_task_{task['id']}"):
                    delete_entry("tasks_completed", task["id"], user_id)
                    st.rerun()

    # --- –õ–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤–∏—á–æ–∫ ---
    st.subheader("üìù –õ–æ–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–≤–∏—á–æ–∫")
    month_logs = [l for l in logs if l["month"] == selected_month]
    if not month_logs:
        st.info("‚ÑπÔ∏è –ù–µ–º–∞—î –ª–æ–≥—ñ–≤ –∑–∞ —Ü–µ–π –º—ñ—Å—è—Ü—å.")
    else:
        for log in month_logs:
            st.markdown(f"‚Ä¢ **{log['habit_name']}** ‚Äî {log.get('completed_at', '‚Äî')}")
            if st.button("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ª–æ–≥", key=f"delete_log_{log['id']}"):
                delete_entry("habit_logs", log["id"], user_id)
                st.rerun()
