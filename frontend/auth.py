import streamlit as st
from supabase import create_client
from dotenv import load_dotenv
import os

load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è ---
def require_login():
    if "user" not in st.session_state:
        login()
    return st.session_state.get("user")

def login():
    st.subheader("üîê –í—Ö—ñ–¥")
    email = st.text_input("Email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if st.button("–£–≤—ñ–π—Ç–∏"):
        try:
            result = supabase.auth.sign_in_with_password({"email": email, "password": password})
            st.session_state["auth"] = result
            st.session_state["user"] = result.user
            st.session_state["token"] = result.session.access_token
            st.success("‚úÖ –í—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            st.rerun()
        except Exception:
            st.error("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å")

def logout():
    if st.sidebar.button("üö™ –í–∏–π—Ç–∏"):
        st.session_state.clear()
        st.rerun()

# --- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ---
def register():
    st.subheader("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")
    name = st.text_input("–Ü–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    email = st.text_input("Email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if st.button("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å"):
        try:
            result = supabase.auth.sign_up({
                "email": email,
                "password": password,
                "options": {
                    "data": {"name": name}
                },
            })
            st.success("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
        except Exception:
            st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó")

def get_current_user():
    return st.session_state.get("user")

# --- –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö ---
def update_user_metadata(data: dict):
    user = get_current_user()
    return supabase.auth.update_user(user_metadata=data)

def update_display_name(name: str):
    user = get_current_user()
    if user:
        supabase.auth.update_user({"data": {"name": name}})

# def update_email(new_email: str):
#     user = get_current_user()
#     if user:
#         supabase.auth.update_user({"email": new_email})

def update_password(new_password: str):
    user = get_current_user()
    if user:
        supabase.auth.update_user({"password": new_password})

def reset_password():
    st.subheader("üîë –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è")
    email = st.text_input("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π Email –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è")

    if st.button("üì© –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–∏—Å—Ç –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è"):
        try:
            supabase.auth.reset_password_email(email)
            st.success("‚úÖ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –Ω–∞ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É.")
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–∞—Ä–æ–ª—è: {e}")
